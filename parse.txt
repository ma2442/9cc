program = ( (func | strc | enm) ";" )*
func = declaration "(" (declaration ("," declaration)* )? ")" "{" labeled* "}"
labeled = label ":" labeled | stmt
stmt =
    | decla_and_assign  ";"
    |  expr ";" 
    | "{" labeled* "}"
    | "return" expr ";" 
    | "if" "(" expr ")" labeled ("else" labeled )? 
    | "switch" "(" expr ")" labeled 
    | "do" labeled "while" "(" expr ")" ";"
    | "while" "(" expr ")" labeled
    | "for" "(" decla_and_assign? ";" expr? ";" expr? ")" labeled
    | ...
decla_and_assign = declaration ("=" assign)?
declaration = type symbol ("[" num "]")*
type = ("int" | "char" | stc | enm ) "*"* 
stc = "struct" (tag)? "{" ( declaration ";" )* "}"
enm = "enum" (tag)? "{" ( symbol ("," symbol)* )? "}"
expr    = assign
assign  = cond ("=" assign)?
cond = bool_or "?" (expr) ":" cond
bool_or = bool_and ("||" bool_and)*
bool_and = equality ("&&" equality)*
equality    = relational (("=="|"!=") relational)*
relational  = add (("<"|">"|"<="|">=") add)*
add = mul (("+"|"-") mul)*
mul = unary (("*"|"/"|"%") unary)*
unary = ("sizeof"|"++"|"--"|"+"|"-"|"*"|"&"|"!")? unary | regex
regex = primary ( "++" | "--" | "[" expr "]" | (("."|"->") symbol) )*
primary = strlit
    | "(" expr ")"
    | symbol "(" ( expr (","expr)* )? ")" // func call
    | symbol
    | num 
strlit = '"' [^"]* '"'  // 文字列リテラル
label = ident | "case" const | "default"
tag = ident
symbol = ident
ident = ("_" | ALPHA | alpha) ("_" | ALPHA | alpha | ten)*

ALPHA = "A" | "B" | ... | "Z"
alpha = "a" | "b" | ... | "z"
num = ten ten*
ten = "0" | "1" | ... | "9"
