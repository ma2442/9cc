program = ( (func | decla_and_assign | "typedef" type ident) ";" )*
func = declaration "(" (declaration ("," declaration)* )? ")" "{" labeled* "}"
localtop = "typedef" type ident ";" | labeled
labeled = label ":" labeled | stmt
stmt
    = decla_and_assign ";"
    | ("break" | "continue") ";"
    | "{" localtop* "}"
    | "return" (expr) ";" 
    | "if" "(" expr ")" localtop ("else" localtop )? 
    | "switch" "(" expr ")" localtop 
    | "do" localtop "while" "(" expr ")" ";"
    | "while" "(" expr ")" localtop
    | "for" "(" decla_and_assign? ";" expr? ";" expr? ")" localtop
    | "goto" label ";"
    | ...
decla_and_assign = declaration ("=" assign)? | expr
assign  = cond ("=" assign)?
declaration = type symbol ("[" num "]")*
type = (tint | tchar | void | stc | enm ) "*"*
tint
    = ("signed" | "unsigned" | "long" | "short")* "int"
    = ("signed" | "unsigned" | "long" | "short")+
tchar = ("signed" | "unsigned")? "char"
stc = "struct" (tag)? "{" ( declaration ";" )* "}"
enm = "enum" (tag)? "{" ( symbol ("," symbol)* )? "}"
expr    = compo_assign 
compo_assign 
    = cond ( ( "<<=" | ">>=" | "|=" | "^=" | "&="
              | "+=" | "-=" | "*=" | "/=" | "%=" | "="
    ) compo_assign )?
cond = bool_or "?" (expr) ":" cond
bool_or = bool_and ("||" bool_and)*
bool_and = or ("&&" or)*
or = xor ("|" xor)*
xor = and ("^" and)*
and = equality ("&" equality)*
equality    = relational (("=="|"!=") relational)*
relational  = shift (("<"|">"|"<="|">=") shift)*
shift = add (("<<"|">>") add)*
add = mul (("+"|"-") mul)*
mul = unary (("*"|"/"|"%") unary)*
unary = ("("cast")"|"sizeof"|"++"|"--"|"+"|"-"|"*"|"&"|"!"|"~")? unary | regex
cast = type
regex = primary ( "++" | "--" | "[" expr "]" | (("."|"->") symbol) )*
primary = strlit
    | "(" expr ")"
    | symbol "(" ( expr (","expr)* )? ")" // func call
    | symbol
    | num 
strlit = '"' [^"]* '"'  // 文字列リテラル
label = ident | "case" const | "default"
tag = ident
symbol = ident
ident = ("_" | ALPHA | alpha) ("_" | ALPHA | alpha | ten)*

ALPHA = "A" | "B" | ... | "Z"
alpha = "a" | "b" | ... | "z"
num = ten ten*
ten = "0" | "1" | ... | "9"
